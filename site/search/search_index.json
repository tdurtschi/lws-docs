{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Knowledge Base Here you can find notes I've collected over time. Use the navigation pane to browse content. Return to Lake Wingra Software","title":"Knowledge Base"},{"location":"#knowledge-base","text":"Here you can find notes I've collected over time. Use the navigation pane to browse content. Return to Lake Wingra Software","title":"Knowledge Base"},{"location":"Notes/docker/","text":"Docker Internal DNS Connecting from one docker container to another using 'localhost' doesn't work. Instead, use the docker internal dns address: EXTERNAL_URL=http://host.docker.internal:5001 Github Container Registry Authenticate with GHCR Go to https://github.com/settings/tokens and create a \"classic token\". Include write:packages and read:packages permissions Use a descriptive name , like 'Home PC (Docker)'. You will likely have many tokens in use in different places. Having a descriptive name will be useful when a token expires. Copy the generated token and run this command: \u279c ~ export CR_PAT=YOUR_TOKEN_HERE \u279c ~ echo $CR_PAT | docker login ghcr.io -u tdurtschi --password-stdin For more info, check out Working with the container registry (Github) MySQL Quickstart with docker-compose This example initializes a MariaDB container and a user with specified password. To get started, save the following file in your current directory as docker-compose.yml . The docker image will be downloaded (this may take a few minutes) and then the container will run locally. # This file contains the configuration needed to run a local MariaDB # (MySQL compatible) server for development purposes. # # To start the MariaDB server, run: # > docker-compose up # # If you need to re-initialize the database (for example, when schema updates # are available), you must first destroy the container: # > docker-compose down # # Connect to this server using the connection string: # 'server=localhost;port=3306;database=local_db;uid=local_user;password=password;' version: \"3.9\" services: mysql: image: mariadb:10.7 ports: - 3306:3306 volumes: - ./MySQL/init:/docker-entrypoint-initdb.d:ro environment: - MYSQL_ROOT_PASSWORD=p4ssw0rd - MYSQL_DATABASE=local_db - MYSQL_USER=local_user - MYSQL_PASSWORD=password Note: The first time the container runs, it will also run any .sql files in the ./MySQL/init directory. This can be used to creat an initial schema, add test data, etc. I recommend adding numerical prefixes and descriptions for easier readability, i.e. 01_create_table.sql , 02_add_some_data.sql . Initialization scripts are run in alphabetical order, so this will allow you to partition the schema into multiple files, or create forward migrations. Learn more about Docker Compose . Learn more about the docker-compose.yml file.","title":"Docker"},{"location":"Notes/docker/#docker","text":"","title":"Docker"},{"location":"Notes/docker/#internal-dns","text":"Connecting from one docker container to another using 'localhost' doesn't work. Instead, use the docker internal dns address: EXTERNAL_URL=http://host.docker.internal:5001","title":"Internal DNS"},{"location":"Notes/docker/#github-container-registry","text":"Authenticate with GHCR Go to https://github.com/settings/tokens and create a \"classic token\". Include write:packages and read:packages permissions Use a descriptive name , like 'Home PC (Docker)'. You will likely have many tokens in use in different places. Having a descriptive name will be useful when a token expires. Copy the generated token and run this command: \u279c ~ export CR_PAT=YOUR_TOKEN_HERE \u279c ~ echo $CR_PAT | docker login ghcr.io -u tdurtschi --password-stdin For more info, check out Working with the container registry (Github)","title":"Github Container Registry"},{"location":"Notes/docker/#mysql-quickstart-with-docker-compose","text":"This example initializes a MariaDB container and a user with specified password. To get started, save the following file in your current directory as docker-compose.yml . The docker image will be downloaded (this may take a few minutes) and then the container will run locally. # This file contains the configuration needed to run a local MariaDB # (MySQL compatible) server for development purposes. # # To start the MariaDB server, run: # > docker-compose up # # If you need to re-initialize the database (for example, when schema updates # are available), you must first destroy the container: # > docker-compose down # # Connect to this server using the connection string: # 'server=localhost;port=3306;database=local_db;uid=local_user;password=password;' version: \"3.9\" services: mysql: image: mariadb:10.7 ports: - 3306:3306 volumes: - ./MySQL/init:/docker-entrypoint-initdb.d:ro environment: - MYSQL_ROOT_PASSWORD=p4ssw0rd - MYSQL_DATABASE=local_db - MYSQL_USER=local_user - MYSQL_PASSWORD=password Note: The first time the container runs, it will also run any .sql files in the ./MySQL/init directory. This can be used to creat an initial schema, add test data, etc. I recommend adding numerical prefixes and descriptions for easier readability, i.e. 01_create_table.sql , 02_add_some_data.sql . Initialization scripts are run in alphabetical order, so this will allow you to partition the schema into multiple files, or create forward migrations. Learn more about Docker Compose . Learn more about the docker-compose.yml file.","title":"MySQL Quickstart with docker-compose"},{"location":"Notes/dotnet/","text":"Dotnet Override a value in appsettings.json with environment variable To override application config using environment variables, use the following naming convention: # For this appsettings.json file: {\"MyService\": {\"Enabled\": \"false\"}} # Use an override for MyService.Enabled: # (Note the double underscore used instead of colon in env variable name) MyService__Enabled=\"true\" dotnet run --project MyProject # Use defaults from appsettings.json: dotnet run --project MyProject","title":"Dotnet"},{"location":"Notes/dotnet/#dotnet","text":"","title":"Dotnet"},{"location":"Notes/dotnet/#override-a-value-in-appsettingsjson-with-environment-variable","text":"To override application config using environment variables, use the following naming convention: # For this appsettings.json file: {\"MyService\": {\"Enabled\": \"false\"}} # Use an override for MyService.Enabled: # (Note the double underscore used instead of colon in env variable name) MyService__Enabled=\"true\" dotnet run --project MyProject # Use defaults from appsettings.json: dotnet run --project MyProject","title":"Override a value in appsettings.json with environment variable"},{"location":"Software%20Engineering%20Topics/tdd/","text":"TDD - Why do you write the test first? Test Driven Development (TDD) is a simple software development practice: First, a failing test is written. Then, the implementation is written. When writing code with TDD, the process involves repeating these two steps over and over again. In theory, this results in all application behavior being covered by tests. Personally I have found that when it comes to software quality, no technique is more powerful than TDD. However, arguments against TDD are out there. I'd like to address just one here, which is the idea that writing the test first is unnecessary. Consider the following XUnit test: public async Task New_ThrowsErrorIfDuplicateItem() { var service = new ItemService(new InMemoryItemRepository()); var createItemDto = () => new CreateItemDto() { Value = \"false\", ItemHref = \"https://example.com/item\", }; Assert.ThrowsAsync<DuplicateItemException>(async () => await service.New([createItemDto(), createItemDto()])); } In this case, I wrote the test after the function which calculates duplicates & throws the error. The test passed. Nice! Then I commented this logic from the service under test. I re-ran the test expecting it to fail. However, when I ran the test, I was surprised to see that it passed! But how? In this case, ThrowsAsync() is asynchronous, so it must be awaited. Currently, the test exits with no failures, because the test finishes before the asynchronous operation throws the exception. Here is the point... if you don't observe the test failing for the expected reason when the implementation is missing, then you don't actually know if your test tests the code you think it does. To put it another way, in order to have confidence in the test suite, you must test the test. When the functionality is not correct, we must observe the test failing for the expected reason.","title":"TDD - Why do you write the test first?"},{"location":"Software%20Engineering%20Topics/tdd/#tdd-why-do-you-write-the-test-first","text":"Test Driven Development (TDD) is a simple software development practice: First, a failing test is written. Then, the implementation is written. When writing code with TDD, the process involves repeating these two steps over and over again. In theory, this results in all application behavior being covered by tests. Personally I have found that when it comes to software quality, no technique is more powerful than TDD. However, arguments against TDD are out there. I'd like to address just one here, which is the idea that writing the test first is unnecessary. Consider the following XUnit test: public async Task New_ThrowsErrorIfDuplicateItem() { var service = new ItemService(new InMemoryItemRepository()); var createItemDto = () => new CreateItemDto() { Value = \"false\", ItemHref = \"https://example.com/item\", }; Assert.ThrowsAsync<DuplicateItemException>(async () => await service.New([createItemDto(), createItemDto()])); } In this case, I wrote the test after the function which calculates duplicates & throws the error. The test passed. Nice! Then I commented this logic from the service under test. I re-ran the test expecting it to fail. However, when I ran the test, I was surprised to see that it passed! But how? In this case, ThrowsAsync() is asynchronous, so it must be awaited. Currently, the test exits with no failures, because the test finishes before the asynchronous operation throws the exception. Here is the point... if you don't observe the test failing for the expected reason when the implementation is missing, then you don't actually know if your test tests the code you think it does. To put it another way, in order to have confidence in the test suite, you must test the test. When the functionality is not correct, we must observe the test failing for the expected reason.","title":"TDD - Why do you write the test first?"}]}