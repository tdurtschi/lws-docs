{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Return to Home Page . LWS Knowledge Base Welcome to the LWS Knowledge Base. Use the navigation pane to browse content.","title":"Home"},{"location":"#lws-knowledge-base","text":"Welcome to the LWS Knowledge Base. Use the navigation pane to browse content.","title":"LWS Knowledge Base"},{"location":"1.%20Lake%20Wingra%20Software/01%20-%20whoAreWe/","text":"About What is Lake Wingra Software? Hello, I'm Teagan Durtschi. I created Lake Wingra Software with the goal of connecting with great people to work on interesting projects. Since 2022, I've been lucky to collaborate with a diverse set of different teams, including a healthcare startup, a manufacturing facility, a university lab, and a permaculture consultancy. I enjoy hitting the ground running and identifying high-impact areas to help teams improve their software products. Do you need help building or refining your product? Let's connect! Send me an email lakewingrasoftware@gmail.com or DM me on LinkedIn . Looking for a Software Engineering resume ? Looking for a Devops resume ? About Lake Wingra Lake Wingra is located in Madison, Wisconsin.","title":"About"},{"location":"1.%20Lake%20Wingra%20Software/01%20-%20whoAreWe/#about","text":"","title":"About"},{"location":"1.%20Lake%20Wingra%20Software/01%20-%20whoAreWe/#what-is-lake-wingra-software","text":"Hello, I'm Teagan Durtschi. I created Lake Wingra Software with the goal of connecting with great people to work on interesting projects. Since 2022, I've been lucky to collaborate with a diverse set of different teams, including a healthcare startup, a manufacturing facility, a university lab, and a permaculture consultancy. I enjoy hitting the ground running and identifying high-impact areas to help teams improve their software products. Do you need help building or refining your product? Let's connect! Send me an email lakewingrasoftware@gmail.com or DM me on LinkedIn . Looking for a Software Engineering resume ? Looking for a Devops resume ?","title":"What is Lake Wingra Software?"},{"location":"1.%20Lake%20Wingra%20Software/01%20-%20whoAreWe/#about-lake-wingra","text":"Lake Wingra is located in Madison, Wisconsin.","title":"About Lake Wingra"},{"location":"1.%20Lake%20Wingra%20Software/02%20-%20projects/","text":"Open Source Projects Block Game ( GitHub ) Elevator Saga 2 ( GitHub ) OneLibrary ( Codeberg )","title":"Open Source Projects"},{"location":"1.%20Lake%20Wingra%20Software/02%20-%20projects/#open-source-projects","text":"Block Game ( GitHub ) Elevator Saga 2 ( GitHub ) OneLibrary ( Codeberg )","title":"Open Source Projects"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/","text":"Test Driven Development I have found no technique that with a higher impact on software quality than Test Driven Development , or TDD . I'm a huge fan, possibly bordering on fanatic, so just know you will get a very biased view of TDD here. Most teams do not practice TDD, and since most software engineers are very bright people, I assume their reasoning is sound! But to me the results are so clear and so valuable, I just can't imagine going without. What is it? TDD, or Test Driven Development, is a simple, 3-step software development practice. First, a developer creates a new automated test that describes some expected behavior of the code. Behaviors are just the various ways your software behaves given different inputs. Here's an example: \"If the user types an invalid character in the field, it should indicate an error by applying a red outline\" . At this point, the developer runs the test. However, the expected behavior doesn't exist, so the test will fail. After running the test and watching it fail, the developer writes some code that makes the test pass. When every automated test passes, this provides an opportunity to refactor the code. After the developer has (optionally) refactored the code, it is time to work on the next incremental feature by writing a new test. As you can see, each of the 3 steps follows one of the others, forming a cycle . When developing an application, applying TDD means to repeat the cycle over and over and over again. A concise way to remember this is \" Red-Green-Refactor \". Why Test? The purpose of TDD is to ensure that test coverage remains as high as possible. But test coverage isn't just a metric for its own sake. Let\u2019s step back and ask: why is test coverage important? What really matters at the end of the day is good software. In other words, the app should work! To make sure it works, we test it out. If the code is complete and it has been manually tested, we can confently deliver the app and call it a day. If only it was so simple! The reality for nearly all software is that it is never done; it is always being tweaked and improved. Top software companies like Amazon and Google push new updates to their major products daily or even multiple times a day. There is a term for this: Continuous Delivery . So a tension is born. We want frequent changes to the code, and we want to deliver quickly, but we also want the app to work. Some teams accept the risk of breaking things, and simply don't test. Other teams pay some error-prone humans to test each version of the app before it gets shipped. The third option is comprehensive automated tests . Having good test coverage is about delivering quickly and confidently . Invest in Tests One argument against TDD is that writing automated tests takes too long, or it is too hard. I won't argue that it takes time and can be difficult, especially at first. But the other side of this equation deserves exploring. When we invest in tests, what do we get for our efforts? First, as I mentioned earlier, your automated tests replace testing by hand. In many cases manual testing can be eliminated by comprehensive tests. That's probably reason enough to write automated tests. However, beyond that lies another big return on investment in the form of developer confidence . This is somewhat hard to convey if you haven't experienced it, but it's undeniable for many who have worked on well-tested codebases. In short, having tests gives you freedom to make bigger, bolder changes to the code, especially refactoring . A great deep dive on this is Matthew Parker's Why TDD . Why Test First? One of the biggest arguments against TDD is that the whole idea of 'writing the test first' is unnecessary. But I think when you drill down on what makes a good test, the idea of writing them first naturally follows. The main thing a good test should do is pass when things work as expected, and fail when they don't work as expected. It sounds obvious but it's worth saying. As the author of a good test, a developer needs to verify both of these scenarios. In other words, they must try the test on 2 different versions of the code and see that the test passes under the expected condition, and fails under incorrect conditions. I really want to drive this point: if a test has never failed, it's not a good test . I have encountered many tests that look correct at first glance but never fail due to some bug in the test. So a test should fail. The only remaining question is, at what point in development should the test fail? The test fails first . Congratulations, you're doing TDD! The implementation comes first, then a test which passes. Then at the end , the implementation is temporarily removed to verify the test will fail. This is still effective, but it does add an extra step. For me, the choice is clear. Only writing the test first gives me the confidence I need while avoiding extra work. That's why I TDD! Learn more about TDD Let's chat about TDD or discuss how adopting TDD could improve outcomes for your team! Resources Test Driven Development - Martin Fowler Test Driven Development By Example - Kent Beck (Amazon)","title":"Test Driven Development"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/#test-driven-development","text":"I have found no technique that with a higher impact on software quality than Test Driven Development , or TDD . I'm a huge fan, possibly bordering on fanatic, so just know you will get a very biased view of TDD here. Most teams do not practice TDD, and since most software engineers are very bright people, I assume their reasoning is sound! But to me the results are so clear and so valuable, I just can't imagine going without.","title":"Test Driven Development"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/#what-is-it","text":"TDD, or Test Driven Development, is a simple, 3-step software development practice. First, a developer creates a new automated test that describes some expected behavior of the code. Behaviors are just the various ways your software behaves given different inputs. Here's an example: \"If the user types an invalid character in the field, it should indicate an error by applying a red outline\" . At this point, the developer runs the test. However, the expected behavior doesn't exist, so the test will fail. After running the test and watching it fail, the developer writes some code that makes the test pass. When every automated test passes, this provides an opportunity to refactor the code. After the developer has (optionally) refactored the code, it is time to work on the next incremental feature by writing a new test. As you can see, each of the 3 steps follows one of the others, forming a cycle . When developing an application, applying TDD means to repeat the cycle over and over and over again. A concise way to remember this is \" Red-Green-Refactor \".","title":"What is it?"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/#why-test","text":"The purpose of TDD is to ensure that test coverage remains as high as possible. But test coverage isn't just a metric for its own sake. Let\u2019s step back and ask: why is test coverage important? What really matters at the end of the day is good software. In other words, the app should work! To make sure it works, we test it out. If the code is complete and it has been manually tested, we can confently deliver the app and call it a day. If only it was so simple! The reality for nearly all software is that it is never done; it is always being tweaked and improved. Top software companies like Amazon and Google push new updates to their major products daily or even multiple times a day. There is a term for this: Continuous Delivery . So a tension is born. We want frequent changes to the code, and we want to deliver quickly, but we also want the app to work. Some teams accept the risk of breaking things, and simply don't test. Other teams pay some error-prone humans to test each version of the app before it gets shipped. The third option is comprehensive automated tests . Having good test coverage is about delivering quickly and confidently .","title":"Why Test?"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/#invest-in-tests","text":"One argument against TDD is that writing automated tests takes too long, or it is too hard. I won't argue that it takes time and can be difficult, especially at first. But the other side of this equation deserves exploring. When we invest in tests, what do we get for our efforts? First, as I mentioned earlier, your automated tests replace testing by hand. In many cases manual testing can be eliminated by comprehensive tests. That's probably reason enough to write automated tests. However, beyond that lies another big return on investment in the form of developer confidence . This is somewhat hard to convey if you haven't experienced it, but it's undeniable for many who have worked on well-tested codebases. In short, having tests gives you freedom to make bigger, bolder changes to the code, especially refactoring . A great deep dive on this is Matthew Parker's Why TDD .","title":"Invest in Tests"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/#why-test-first","text":"One of the biggest arguments against TDD is that the whole idea of 'writing the test first' is unnecessary. But I think when you drill down on what makes a good test, the idea of writing them first naturally follows. The main thing a good test should do is pass when things work as expected, and fail when they don't work as expected. It sounds obvious but it's worth saying. As the author of a good test, a developer needs to verify both of these scenarios. In other words, they must try the test on 2 different versions of the code and see that the test passes under the expected condition, and fails under incorrect conditions. I really want to drive this point: if a test has never failed, it's not a good test . I have encountered many tests that look correct at first glance but never fail due to some bug in the test. So a test should fail. The only remaining question is, at what point in development should the test fail? The test fails first . Congratulations, you're doing TDD! The implementation comes first, then a test which passes. Then at the end , the implementation is temporarily removed to verify the test will fail. This is still effective, but it does add an extra step. For me, the choice is clear. Only writing the test first gives me the confidence I need while avoiding extra work. That's why I TDD!","title":"Why Test First?"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/#learn-more-about-tdd","text":"Let's chat about TDD or discuss how adopting TDD could improve outcomes for your team!","title":"Learn more about TDD"},{"location":"2.%20Software%20Engineering%20Practices/01-%20tdd/#resources","text":"Test Driven Development - Martin Fowler Test Driven Development By Example - Kent Beck (Amazon)","title":"Resources"},{"location":"3.%20Miscellaneous/01%20-%20goodStuff/","text":"Good Stuff / External Resources Consulting resources Labs Practices Go Fast Forever Learning resources Flexbox Froggy Fun Internet Checkpoint Universal Paperclips","title":"Good Stuff / External Resources"},{"location":"3.%20Miscellaneous/01%20-%20goodStuff/#good-stuff-external-resources","text":"","title":"Good Stuff / External Resources"},{"location":"3.%20Miscellaneous/01%20-%20goodStuff/#consulting-resources","text":"Labs Practices Go Fast Forever","title":"Consulting resources"},{"location":"3.%20Miscellaneous/01%20-%20goodStuff/#learning-resources","text":"Flexbox Froggy","title":"Learning resources"},{"location":"3.%20Miscellaneous/01%20-%20goodStuff/#fun","text":"Internet Checkpoint Universal Paperclips","title":"Fun"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/","text":"Developer Experience Tips Helpful key shortcuts for MacOS Cmd + Shift + 4 = take screenshot to Desktop Cmd + Shift + Ctrl + 4 = take screenshot to Clipboard Cmd + Shift + 5 = take screenshot/recording or update screenshot defaults Helpful apps homebrew to manage app installation from cli see https://brew.sh/ flycut A nice paste buffer. Helpful key shortcuts - Cmd + Shift + v = open paste buffer menu tldr tldr gives you nice digestible examples for cli programs: #> tldr sed sed Edit text in a scriptable manner. See also: `awk`, `ed`. More information: <https://keith.github.io/xcode-man-pages/sed.1.html>. - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`: command | sed 's/apple/mango/g' - Execute a specific script [f]ile and print the result to `stdout`: command | sed -f path/to/script_file.sed - Replace all `apple` (extended regex) occurrences with `APPLE` (extended regex) in all input lines and print the result to `stdout`: command | sed -E 's/(apple)/\\U\\1/g' - Print just a first line to `stdout`: command | sed -n '1p' - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in a `file` and save a backup of the original to `file.bak`: sed -i bak 's/apple/mango/g' path/to/file ohmyzsh My preferred way to work in the terminal. see https://ohmyz.sh/ https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dotenv","title":"Developer Experience Tips"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/#developer-experience-tips","text":"","title":"Developer Experience Tips"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/#helpful-key-shortcuts-for-macos","text":"Cmd + Shift + 4 = take screenshot to Desktop Cmd + Shift + Ctrl + 4 = take screenshot to Clipboard Cmd + Shift + 5 = take screenshot/recording or update screenshot defaults","title":"Helpful key shortcuts for MacOS"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/#helpful-apps","text":"","title":"Helpful apps"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/#homebrew","text":"to manage app installation from cli see https://brew.sh/","title":"homebrew"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/#flycut","text":"A nice paste buffer. Helpful key shortcuts - Cmd + Shift + v = open paste buffer menu","title":"flycut"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/#tldr","text":"tldr gives you nice digestible examples for cli programs: #> tldr sed sed Edit text in a scriptable manner. See also: `awk`, `ed`. More information: <https://keith.github.io/xcode-man-pages/sed.1.html>. - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`: command | sed 's/apple/mango/g' - Execute a specific script [f]ile and print the result to `stdout`: command | sed -f path/to/script_file.sed - Replace all `apple` (extended regex) occurrences with `APPLE` (extended regex) in all input lines and print the result to `stdout`: command | sed -E 's/(apple)/\\U\\1/g' - Print just a first line to `stdout`: command | sed -n '1p' - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in a `file` and save a backup of the original to `file.bak`: sed -i bak 's/apple/mango/g' path/to/file","title":"tldr"},{"location":"3.%20Miscellaneous/02%20-%20devExperience/#ohmyzsh","text":"My preferred way to work in the terminal. see https://ohmyz.sh/ https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dotenv","title":"ohmyzsh"},{"location":"3.%20Miscellaneous/03%20-%20docker/","text":"Docker Internal DNS Connecting from one docker container to another using 'localhost' doesn't work. Instead, use the docker internal dns address: EXTERNAL_URL=http://host.docker.internal:5001 Github Container Registry Authenticate with GHCR Go to https://github.com/settings/tokens and create a \"classic token\". Include write:packages and read:packages permissions Use a descriptive name , like 'Home PC (Docker)'. You will likely have many tokens in use in different places. Having a descriptive name will be useful when a token expires. Copy the generated token and run this command: \u279c ~ export CR_PAT=YOUR_TOKEN_HERE \u279c ~ echo $CR_PAT | docker login ghcr.io -u tdurtschi --password-stdin For more info, check out Working with the container registry (Github) MySQL Quickstart with docker-compose This example initializes a MariaDB container and a user with specified password. To get started, save the following file in your current directory as docker-compose.yml . The docker image will be downloaded (this may take a few minutes) and then the container will run locally. # This file contains the configuration needed to run a local MariaDB # (MySQL compatible) server for development purposes. # # To start the MariaDB server, run: # > docker-compose up # # If you need to re-initialize the database (for example, when schema updates # are available), you must first destroy the container: # > docker-compose down # # Connect to this server using the connection string: # 'server=localhost;port=3306;database=local_db;uid=local_user;password=password;' version: \"3.9\" services: mysql: image: mariadb:10.7 ports: - 3306:3306 volumes: - ./MySQL/init:/docker-entrypoint-initdb.d:ro environment: - MYSQL_ROOT_PASSWORD=p4ssw0rd - MYSQL_DATABASE=local_db - MYSQL_USER=local_user - MYSQL_PASSWORD=password Note: The first time the container runs, it will also run any .sql files in the ./MySQL/init directory. This can be used to creat an initial schema, add test data, etc. I recommend adding numerical prefixes and descriptions for easier readability, i.e. 01_create_table.sql , 02_add_some_data.sql . Initialization scripts are run in alphabetical order, so this will allow you to partition the schema into multiple files, or create forward migrations. Learn more about Docker Compose . Learn more about the docker-compose.yml file.","title":"Docker"},{"location":"3.%20Miscellaneous/03%20-%20docker/#docker","text":"","title":"Docker"},{"location":"3.%20Miscellaneous/03%20-%20docker/#internal-dns","text":"Connecting from one docker container to another using 'localhost' doesn't work. Instead, use the docker internal dns address: EXTERNAL_URL=http://host.docker.internal:5001","title":"Internal DNS"},{"location":"3.%20Miscellaneous/03%20-%20docker/#github-container-registry","text":"Authenticate with GHCR Go to https://github.com/settings/tokens and create a \"classic token\". Include write:packages and read:packages permissions Use a descriptive name , like 'Home PC (Docker)'. You will likely have many tokens in use in different places. Having a descriptive name will be useful when a token expires. Copy the generated token and run this command: \u279c ~ export CR_PAT=YOUR_TOKEN_HERE \u279c ~ echo $CR_PAT | docker login ghcr.io -u tdurtschi --password-stdin For more info, check out Working with the container registry (Github)","title":"Github Container Registry"},{"location":"3.%20Miscellaneous/03%20-%20docker/#mysql-quickstart-with-docker-compose","text":"This example initializes a MariaDB container and a user with specified password. To get started, save the following file in your current directory as docker-compose.yml . The docker image will be downloaded (this may take a few minutes) and then the container will run locally. # This file contains the configuration needed to run a local MariaDB # (MySQL compatible) server for development purposes. # # To start the MariaDB server, run: # > docker-compose up # # If you need to re-initialize the database (for example, when schema updates # are available), you must first destroy the container: # > docker-compose down # # Connect to this server using the connection string: # 'server=localhost;port=3306;database=local_db;uid=local_user;password=password;' version: \"3.9\" services: mysql: image: mariadb:10.7 ports: - 3306:3306 volumes: - ./MySQL/init:/docker-entrypoint-initdb.d:ro environment: - MYSQL_ROOT_PASSWORD=p4ssw0rd - MYSQL_DATABASE=local_db - MYSQL_USER=local_user - MYSQL_PASSWORD=password Note: The first time the container runs, it will also run any .sql files in the ./MySQL/init directory. This can be used to creat an initial schema, add test data, etc. I recommend adding numerical prefixes and descriptions for easier readability, i.e. 01_create_table.sql , 02_add_some_data.sql . Initialization scripts are run in alphabetical order, so this will allow you to partition the schema into multiple files, or create forward migrations. Learn more about Docker Compose . Learn more about the docker-compose.yml file.","title":"MySQL Quickstart with docker-compose"},{"location":"3.%20Miscellaneous/04%20-%20dotnet/","text":"Dotnet Override a value in appsettings.json with environment variable To override application config using environment variables, use the following naming convention: # For this appsettings.json file: {\"MyService\": {\"Enabled\": \"false\"}} # Use an override for MyService.Enabled: # (Note the double underscore used instead of colon in env variable name) MyService__Enabled=\"true\" dotnet run --project MyProject # Use defaults from appsettings.json: dotnet run --project MyProject","title":"Dotnet"},{"location":"3.%20Miscellaneous/04%20-%20dotnet/#dotnet","text":"","title":"Dotnet"},{"location":"3.%20Miscellaneous/04%20-%20dotnet/#override-a-value-in-appsettingsjson-with-environment-variable","text":"To override application config using environment variables, use the following naming convention: # For this appsettings.json file: {\"MyService\": {\"Enabled\": \"false\"}} # Use an override for MyService.Enabled: # (Note the double underscore used instead of colon in env variable name) MyService__Enabled=\"true\" dotnet run --project MyProject # Use defaults from appsettings.json: dotnet run --project MyProject","title":"Override a value in appsettings.json with environment variable"},{"location":"3.%20Miscellaneous/05%20-%20git/","text":"Git My aliases I find these git aliases useful to reduce typing. In particular, I use git lol and git lola daily, since they are very helpful commands and who can remember all those flags? To use a git alias, just substitute the command with the alias. E.g. git st instead of git status . To use, amend your ~/.gitconfig file with the aliases you want to include: # This is Git's per-user configuration file. [user] # ... [alias] st = status ci = commit br = branch co = checkout ds = diff --staged lg = log -p lol = log --graph --decorate --pretty=oneline --abbrev-commit lola = log --graph --decorate --pretty=oneline --abbrev-commit --all","title":"Git"},{"location":"3.%20Miscellaneous/05%20-%20git/#git","text":"","title":"Git"},{"location":"3.%20Miscellaneous/05%20-%20git/#my-aliases","text":"I find these git aliases useful to reduce typing. In particular, I use git lol and git lola daily, since they are very helpful commands and who can remember all those flags? To use a git alias, just substitute the command with the alias. E.g. git st instead of git status . To use, amend your ~/.gitconfig file with the aliases you want to include: # This is Git's per-user configuration file. [user] # ... [alias] st = status ci = commit br = branch co = checkout ds = diff --staged lg = log -p lol = log --graph --decorate --pretty=oneline --abbrev-commit lola = log --graph --decorate --pretty=oneline --abbrev-commit --all","title":"My aliases"},{"location":"3.%20Miscellaneous/06%20-%20kuberenetes/","text":"Kubernetes Custom kubectl shortcuts These examples use zsh, but could be easily adapted to bash. To edit the zsh config file: vim ~/.zshrc Note: make sure you restart the terminal after making these updates, or run zsh to create a new session. Here are the aliases I use today: alias k=kubectl alias kdev=\"kubectl config set-context --current --namespace=dev\" alias kqa=\"kubectl config set-context --current --namespace=qa\" alias kuat=\"kubectl config set-context --current --namespace=uat\" alias kgp=\"kubectl get pods\" kenv() { kubectl config set-context --current --namespace=$1; } kbash() { kubectl exec --stdin --tty $1 -- /bin/bash; } As you can see, I use alias to create shortcuts for very common commands. If a shortcut requires an argument, you can create a function. Example usage: > kqa Context \"k8s-context\" modified. > kgp NAME READY STATUS RESTARTS AGE my-service-99bcfcdf5-9vvkl 1/1 Running 0 25d > kbash my-service-99bcfcdf5-9vvkl root@my-service-99bcfcdf5-9vvkl:/> k9s Consider k9s to simplify kubernetes management tasks including: Describing pods Executing shell on a pod Port forwarding Vewing Logs","title":"Kubernetes"},{"location":"3.%20Miscellaneous/06%20-%20kuberenetes/#kubernetes","text":"","title":"Kubernetes"},{"location":"3.%20Miscellaneous/06%20-%20kuberenetes/#custom-kubectl-shortcuts","text":"These examples use zsh, but could be easily adapted to bash. To edit the zsh config file: vim ~/.zshrc Note: make sure you restart the terminal after making these updates, or run zsh to create a new session. Here are the aliases I use today: alias k=kubectl alias kdev=\"kubectl config set-context --current --namespace=dev\" alias kqa=\"kubectl config set-context --current --namespace=qa\" alias kuat=\"kubectl config set-context --current --namespace=uat\" alias kgp=\"kubectl get pods\" kenv() { kubectl config set-context --current --namespace=$1; } kbash() { kubectl exec --stdin --tty $1 -- /bin/bash; } As you can see, I use alias to create shortcuts for very common commands. If a shortcut requires an argument, you can create a function. Example usage: > kqa Context \"k8s-context\" modified. > kgp NAME READY STATUS RESTARTS AGE my-service-99bcfcdf5-9vvkl 1/1 Running 0 25d > kbash my-service-99bcfcdf5-9vvkl root@my-service-99bcfcdf5-9vvkl:/>","title":"Custom kubectl shortcuts"},{"location":"3.%20Miscellaneous/06%20-%20kuberenetes/#k9s","text":"Consider k9s to simplify kubernetes management tasks including: Describing pods Executing shell on a pod Port forwarding Vewing Logs","title":"k9s"}]}