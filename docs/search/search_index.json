{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Return to Home Page . LWS Knowledge Base Welcome to the LWS Knowledge Base. Use the navigation pane to browse content. Good Stuff / External Resources Labs Practices Go Fast Forever Flexbox Froggy","title":"Home"},{"location":"#lws-knowledge-base","text":"Welcome to the LWS Knowledge Base. Use the navigation pane to browse content.","title":"LWS Knowledge Base"},{"location":"#good-stuff-external-resources","text":"Labs Practices Go Fast Forever Flexbox Froggy","title":"Good Stuff / External Resources"},{"location":"1.%20Lake%20Wingra%20Software/01whoAreWe/","text":"About Us Who is Lake Wingra Software Hello, my name is Teagan Durtschi. I created Lake Wingra Software with the goal of connecting with great people to work on interesting projects. Do you need help working on something cool? Let's connect! Send me an email lakewingrasoftware@gmail.com or message on LinkedIn . Looking for a Software Engineering resume ? Looking for a Devops resume ?","title":"About Us"},{"location":"1.%20Lake%20Wingra%20Software/01whoAreWe/#about-us","text":"","title":"About Us"},{"location":"1.%20Lake%20Wingra%20Software/01whoAreWe/#who-is-lake-wingra-software","text":"Hello, my name is Teagan Durtschi. I created Lake Wingra Software with the goal of connecting with great people to work on interesting projects. Do you need help working on something cool? Let's connect! Send me an email lakewingrasoftware@gmail.com or message on LinkedIn . Looking for a Software Engineering resume ? Looking for a Devops resume ?","title":"Who is Lake Wingra Software"},{"location":"1.%20Lake%20Wingra%20Software/02projects/","text":"Projects Open Source Projects Block Game ( GitHub ) Elevator Saga 2 ( GitHub ) OneLibrary ( Codeberg )","title":"Projects"},{"location":"1.%20Lake%20Wingra%20Software/02projects/#projects","text":"","title":"Projects"},{"location":"1.%20Lake%20Wingra%20Software/02projects/#open-source-projects","text":"Block Game ( GitHub ) Elevator Saga 2 ( GitHub ) OneLibrary ( Codeberg )","title":"Open Source Projects"},{"location":"2.%20Software%20Engineering%20Practices/tdd/","text":"Test Driven Development (Draft) In my experience as a software engineer, I have found no technique is more powerful than Test Driven Development, or \"TDD\". What is TDD TDD is a simple software development practice: First, a failing test is written. Then, an implementation is written that makes the test pass. When developing an application, applying TDD means to repeat these two steps over and over again. Why test first? Although TDD can provide a lot of value, arguments against TDD are out there. I'd like to address just one here, which is the idea that writing the test first is unnecessary. Consider the following XUnit test: public async Task New_ThrowsErrorIfDuplicateItem() { var service = new ItemService(new InMemoryItemRepository()); var createItemDto = () => new CreateItemDto() { Value = \"false\", ItemHref = \"https://example.com/item\", }; Assert.ThrowsAsync<DuplicateItemException>(async () => await service.New([createItemDto(), createItemDto()])); } In this case, I first wrote the function ItemService.New which throws the duplicate error, then wrote the test which creates duplicates. The test passed. Nice! Then I removed the duplicate check from the service under test. I re-ran the test expecting it to fail, because now it can't throw the expected error. However, when I ran the test, I was surprised to see that it passed! But how? In this case, ThrowsAsync() is asynchronous, so it must be awaited. Currently, the test exits with no failures, because the test finishes before the asynchronous operation throws the exception. Here is the point... if you don't observe the test failing for the expected reason when the implementation is missing, then you don't actually know if your test tests the code you think it does. To put it another way, in order to have confidence in the test suite, you must test the test. When the functionality is not correct, we must observe the test failing for the expected reason.","title":"Test Driven Development (Draft)"},{"location":"2.%20Software%20Engineering%20Practices/tdd/#test-driven-development-draft","text":"In my experience as a software engineer, I have found no technique is more powerful than Test Driven Development, or \"TDD\".","title":"Test Driven Development (Draft)"},{"location":"2.%20Software%20Engineering%20Practices/tdd/#what-is-tdd","text":"TDD is a simple software development practice: First, a failing test is written. Then, an implementation is written that makes the test pass. When developing an application, applying TDD means to repeat these two steps over and over again.","title":"What is TDD"},{"location":"2.%20Software%20Engineering%20Practices/tdd/#why-test-first","text":"Although TDD can provide a lot of value, arguments against TDD are out there. I'd like to address just one here, which is the idea that writing the test first is unnecessary. Consider the following XUnit test: public async Task New_ThrowsErrorIfDuplicateItem() { var service = new ItemService(new InMemoryItemRepository()); var createItemDto = () => new CreateItemDto() { Value = \"false\", ItemHref = \"https://example.com/item\", }; Assert.ThrowsAsync<DuplicateItemException>(async () => await service.New([createItemDto(), createItemDto()])); } In this case, I first wrote the function ItemService.New which throws the duplicate error, then wrote the test which creates duplicates. The test passed. Nice! Then I removed the duplicate check from the service under test. I re-ran the test expecting it to fail, because now it can't throw the expected error. However, when I ran the test, I was surprised to see that it passed! But how? In this case, ThrowsAsync() is asynchronous, so it must be awaited. Currently, the test exits with no failures, because the test finishes before the asynchronous operation throws the exception. Here is the point... if you don't observe the test failing for the expected reason when the implementation is missing, then you don't actually know if your test tests the code you think it does. To put it another way, in order to have confidence in the test suite, you must test the test. When the functionality is not correct, we must observe the test failing for the expected reason.","title":"Why test first?"},{"location":"3.%20Miscellaneous/devExperience/","text":"Developer Experience Tips Helpful key shortcuts for MacOS Cmd + Shift + 4 = take screenshot to Desktop Cmd + Shift + Ctrl + 4 = take screenshot to Clipboard Cmd + Shift + 5 = take screenshot/recording or update screenshot defaults Helpful apps homebrew to manage app installation from cli see https://brew.sh/ flycut A nice paste buffer. Helpful key shortcuts - Cmd + Shift + v = open paste buffer menu tldr tldr gives you nice digestible examples for cli programs: #> tldr sed sed Edit text in a scriptable manner. See also: `awk`, `ed`. More information: <https://keith.github.io/xcode-man-pages/sed.1.html>. - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`: command | sed 's/apple/mango/g' - Execute a specific script [f]ile and print the result to `stdout`: command | sed -f path/to/script_file.sed - Replace all `apple` (extended regex) occurrences with `APPLE` (extended regex) in all input lines and print the result to `stdout`: command | sed -E 's/(apple)/\\U\\1/g' - Print just a first line to `stdout`: command | sed -n '1p' - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in a `file` and save a backup of the original to `file.bak`: sed -i bak 's/apple/mango/g' path/to/file ohmyzsh My preferred way to work in the terminal. see https://ohmyz.sh/ https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dotenv","title":"Developer Experience Tips"},{"location":"3.%20Miscellaneous/devExperience/#developer-experience-tips","text":"","title":"Developer Experience Tips"},{"location":"3.%20Miscellaneous/devExperience/#helpful-key-shortcuts-for-macos","text":"Cmd + Shift + 4 = take screenshot to Desktop Cmd + Shift + Ctrl + 4 = take screenshot to Clipboard Cmd + Shift + 5 = take screenshot/recording or update screenshot defaults","title":"Helpful key shortcuts for MacOS"},{"location":"3.%20Miscellaneous/devExperience/#helpful-apps","text":"","title":"Helpful apps"},{"location":"3.%20Miscellaneous/devExperience/#homebrew","text":"to manage app installation from cli see https://brew.sh/","title":"homebrew"},{"location":"3.%20Miscellaneous/devExperience/#flycut","text":"A nice paste buffer. Helpful key shortcuts - Cmd + Shift + v = open paste buffer menu","title":"flycut"},{"location":"3.%20Miscellaneous/devExperience/#tldr","text":"tldr gives you nice digestible examples for cli programs: #> tldr sed sed Edit text in a scriptable manner. See also: `awk`, `ed`. More information: <https://keith.github.io/xcode-man-pages/sed.1.html>. - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in all input lines and print the result to `stdout`: command | sed 's/apple/mango/g' - Execute a specific script [f]ile and print the result to `stdout`: command | sed -f path/to/script_file.sed - Replace all `apple` (extended regex) occurrences with `APPLE` (extended regex) in all input lines and print the result to `stdout`: command | sed -E 's/(apple)/\\U\\1/g' - Print just a first line to `stdout`: command | sed -n '1p' - Replace all `apple` (basic regex) occurrences with `mango` (basic regex) in a `file` and save a backup of the original to `file.bak`: sed -i bak 's/apple/mango/g' path/to/file","title":"tldr"},{"location":"3.%20Miscellaneous/devExperience/#ohmyzsh","text":"My preferred way to work in the terminal. see https://ohmyz.sh/ https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/dotenv","title":"ohmyzsh"},{"location":"3.%20Miscellaneous/docker/","text":"Docker Internal DNS Connecting from one docker container to another using 'localhost' doesn't work. Instead, use the docker internal dns address: EXTERNAL_URL=http://host.docker.internal:5001 Github Container Registry Authenticate with GHCR Go to https://github.com/settings/tokens and create a \"classic token\". Include write:packages and read:packages permissions Use a descriptive name , like 'Home PC (Docker)'. You will likely have many tokens in use in different places. Having a descriptive name will be useful when a token expires. Copy the generated token and run this command: \u279c ~ export CR_PAT=YOUR_TOKEN_HERE \u279c ~ echo $CR_PAT | docker login ghcr.io -u tdurtschi --password-stdin For more info, check out Working with the container registry (Github) MySQL Quickstart with docker-compose This example initializes a MariaDB container and a user with specified password. To get started, save the following file in your current directory as docker-compose.yml . The docker image will be downloaded (this may take a few minutes) and then the container will run locally. # This file contains the configuration needed to run a local MariaDB # (MySQL compatible) server for development purposes. # # To start the MariaDB server, run: # > docker-compose up # # If you need to re-initialize the database (for example, when schema updates # are available), you must first destroy the container: # > docker-compose down # # Connect to this server using the connection string: # 'server=localhost;port=3306;database=local_db;uid=local_user;password=password;' version: \"3.9\" services: mysql: image: mariadb:10.7 ports: - 3306:3306 volumes: - ./MySQL/init:/docker-entrypoint-initdb.d:ro environment: - MYSQL_ROOT_PASSWORD=p4ssw0rd - MYSQL_DATABASE=local_db - MYSQL_USER=local_user - MYSQL_PASSWORD=password Note: The first time the container runs, it will also run any .sql files in the ./MySQL/init directory. This can be used to creat an initial schema, add test data, etc. I recommend adding numerical prefixes and descriptions for easier readability, i.e. 01_create_table.sql , 02_add_some_data.sql . Initialization scripts are run in alphabetical order, so this will allow you to partition the schema into multiple files, or create forward migrations. Learn more about Docker Compose . Learn more about the docker-compose.yml file.","title":"Docker"},{"location":"3.%20Miscellaneous/docker/#docker","text":"","title":"Docker"},{"location":"3.%20Miscellaneous/docker/#internal-dns","text":"Connecting from one docker container to another using 'localhost' doesn't work. Instead, use the docker internal dns address: EXTERNAL_URL=http://host.docker.internal:5001","title":"Internal DNS"},{"location":"3.%20Miscellaneous/docker/#github-container-registry","text":"Authenticate with GHCR Go to https://github.com/settings/tokens and create a \"classic token\". Include write:packages and read:packages permissions Use a descriptive name , like 'Home PC (Docker)'. You will likely have many tokens in use in different places. Having a descriptive name will be useful when a token expires. Copy the generated token and run this command: \u279c ~ export CR_PAT=YOUR_TOKEN_HERE \u279c ~ echo $CR_PAT | docker login ghcr.io -u tdurtschi --password-stdin For more info, check out Working with the container registry (Github)","title":"Github Container Registry"},{"location":"3.%20Miscellaneous/docker/#mysql-quickstart-with-docker-compose","text":"This example initializes a MariaDB container and a user with specified password. To get started, save the following file in your current directory as docker-compose.yml . The docker image will be downloaded (this may take a few minutes) and then the container will run locally. # This file contains the configuration needed to run a local MariaDB # (MySQL compatible) server for development purposes. # # To start the MariaDB server, run: # > docker-compose up # # If you need to re-initialize the database (for example, when schema updates # are available), you must first destroy the container: # > docker-compose down # # Connect to this server using the connection string: # 'server=localhost;port=3306;database=local_db;uid=local_user;password=password;' version: \"3.9\" services: mysql: image: mariadb:10.7 ports: - 3306:3306 volumes: - ./MySQL/init:/docker-entrypoint-initdb.d:ro environment: - MYSQL_ROOT_PASSWORD=p4ssw0rd - MYSQL_DATABASE=local_db - MYSQL_USER=local_user - MYSQL_PASSWORD=password Note: The first time the container runs, it will also run any .sql files in the ./MySQL/init directory. This can be used to creat an initial schema, add test data, etc. I recommend adding numerical prefixes and descriptions for easier readability, i.e. 01_create_table.sql , 02_add_some_data.sql . Initialization scripts are run in alphabetical order, so this will allow you to partition the schema into multiple files, or create forward migrations. Learn more about Docker Compose . Learn more about the docker-compose.yml file.","title":"MySQL Quickstart with docker-compose"},{"location":"3.%20Miscellaneous/dotnet/","text":"Dotnet Override a value in appsettings.json with environment variable To override application config using environment variables, use the following naming convention: # For this appsettings.json file: {\"MyService\": {\"Enabled\": \"false\"}} # Use an override for MyService.Enabled: # (Note the double underscore used instead of colon in env variable name) MyService__Enabled=\"true\" dotnet run --project MyProject # Use defaults from appsettings.json: dotnet run --project MyProject","title":"Dotnet"},{"location":"3.%20Miscellaneous/dotnet/#dotnet","text":"","title":"Dotnet"},{"location":"3.%20Miscellaneous/dotnet/#override-a-value-in-appsettingsjson-with-environment-variable","text":"To override application config using environment variables, use the following naming convention: # For this appsettings.json file: {\"MyService\": {\"Enabled\": \"false\"}} # Use an override for MyService.Enabled: # (Note the double underscore used instead of colon in env variable name) MyService__Enabled=\"true\" dotnet run --project MyProject # Use defaults from appsettings.json: dotnet run --project MyProject","title":"Override a value in appsettings.json with environment variable"},{"location":"3.%20Miscellaneous/git/","text":"Git My aliases I find these git aliases useful to reduce typing. In particular, I use git lol and git lola daily, since they are very helpful commands and who can remember all those flags? To use a git alias, just substitute the command with the alias. E.g. git st instead of git status . To use, amend your ~/.gitconfig file with the aliases you want to include: # This is Git's per-user configuration file. [user] # ... [alias] st = status ci = commit br = branch co = checkout ds = diff --staged lg = log -p lol = log --graph --decorate --pretty=oneline --abbrev-commit lola = log --graph --decorate --pretty=oneline --abbrev-commit --all","title":"Git"},{"location":"3.%20Miscellaneous/git/#git","text":"","title":"Git"},{"location":"3.%20Miscellaneous/git/#my-aliases","text":"I find these git aliases useful to reduce typing. In particular, I use git lol and git lola daily, since they are very helpful commands and who can remember all those flags? To use a git alias, just substitute the command with the alias. E.g. git st instead of git status . To use, amend your ~/.gitconfig file with the aliases you want to include: # This is Git's per-user configuration file. [user] # ... [alias] st = status ci = commit br = branch co = checkout ds = diff --staged lg = log -p lol = log --graph --decorate --pretty=oneline --abbrev-commit lola = log --graph --decorate --pretty=oneline --abbrev-commit --all","title":"My aliases"},{"location":"3.%20Miscellaneous/kuberenetes/","text":"Kubernetes Custom kubectl shortcuts These examples use zsh, but could be easily adapted to bash. To edit the zsh config file: vim ~/.zshrc Note: make sure you restart the terminal after making these updates, or run zsh to create a new session. Here are the aliases I use today: alias k=kubectl alias kdev=\"kubectl config set-context --current --namespace=dev\" alias kqa=\"kubectl config set-context --current --namespace=qa\" alias kuat=\"kubectl config set-context --current --namespace=uat\" alias kgp=\"kubectl get pods\" kenv() { kubectl config set-context --current --namespace=$1; } kbash() { kubectl exec --stdin --tty $1 -- /bin/bash; } As you can see, I use alias to create shortcuts for very common commands. If a shortcut requires an argument, you can create a function. Example usage: > kqa Context \"k8s-context\" modified. > kgp NAME READY STATUS RESTARTS AGE my-service-99bcfcdf5-9vvkl 1/1 Running 0 25d > kbash my-service-99bcfcdf5-9vvkl root@my-service-99bcfcdf5-9vvkl:/> k9s Consider k9s to simplify kubernetes management tasks including: Describing pods Executing shell on a pod Port forwarding Vewing Logs","title":"Kubernetes"},{"location":"3.%20Miscellaneous/kuberenetes/#kubernetes","text":"","title":"Kubernetes"},{"location":"3.%20Miscellaneous/kuberenetes/#custom-kubectl-shortcuts","text":"These examples use zsh, but could be easily adapted to bash. To edit the zsh config file: vim ~/.zshrc Note: make sure you restart the terminal after making these updates, or run zsh to create a new session. Here are the aliases I use today: alias k=kubectl alias kdev=\"kubectl config set-context --current --namespace=dev\" alias kqa=\"kubectl config set-context --current --namespace=qa\" alias kuat=\"kubectl config set-context --current --namespace=uat\" alias kgp=\"kubectl get pods\" kenv() { kubectl config set-context --current --namespace=$1; } kbash() { kubectl exec --stdin --tty $1 -- /bin/bash; } As you can see, I use alias to create shortcuts for very common commands. If a shortcut requires an argument, you can create a function. Example usage: > kqa Context \"k8s-context\" modified. > kgp NAME READY STATUS RESTARTS AGE my-service-99bcfcdf5-9vvkl 1/1 Running 0 25d > kbash my-service-99bcfcdf5-9vvkl root@my-service-99bcfcdf5-9vvkl:/>","title":"Custom kubectl shortcuts"},{"location":"3.%20Miscellaneous/kuberenetes/#k9s","text":"Consider k9s to simplify kubernetes management tasks including: Describing pods Executing shell on a pod Port forwarding Vewing Logs","title":"k9s"}]}